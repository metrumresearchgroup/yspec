% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/col_factor.R
\name{ys_factors}
\alias{ys_factors}
\title{Convert columns to factors}
\usage{
ys_factors(data, spec, ..., .keep_values = TRUE, .suffix = "_v")
}
\arguments{
\item{data}{the data set to modify.}

\item{spec}{a yspec object.}

\item{...}{unquoted column names for modification; passing nothing through
\code{...} will signal for all columns to be considered for factors.}

\item{.keep_values}{logical; if \code{TRUE}, value columns will be retained with
a \code{.suffix}.}

\item{.suffix}{a suffix to be added to original columns (holding values).}
}
\value{
The original data frame is returned with columns converted to factors
and (possibly) additional columns storing values.
}
\description{
This function works like \code{\link[=ys_add_factors]{ys_add_factors()}} with the difference that
the original columns become factors (retaining the original column names)
and the original columns are retained with a suffix. You can think of this
as a more convenient form of \code{ys_add_factors(..., .suffix = "")}.
}
\details{
Factor conversion will only take place on source columns that \emph{aren't}
already factors. That is, if a column in \code{data} is already a factor, it
will be ignored. This means the function can be called multiple times on
the same input data, but once a column is converted to factor, it will
cannot be converted again in subsequent calls.
}
\examples{

library(dplyr)

spec <- ys_help$spec()
data <- ys_help$data()

data <- ys_factors(data, spec)

head(data, 5)

spec$EVID

count(data, EVID, EVID_v)

}
\seealso{
\code{\link[=ys_add_factors]{ys_add_factors()}}
}
