% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/help.R
\docType{data}
\name{print.yhelp}
\alias{print.yhelp}
\alias{ys_help}
\title{yspec help object}
\format{
An object of class \code{yhelp} of length 12.
}
\usage{
\method{print}{yhelp}(...)

ys_help
}
\arguments{
\item{...}{not used}
}
\description{
\code{ys_help} is an environment containing functions that can be called to
provide information and examples for how yspec works.  \code{specification()},
\code{internal_db()} and \code{analysis1()} will open up markdown or yaml files
using \link[rstudioapi:navigateToFile]{rstudioapi::navigateToFile} if that package is installed and
\link{file.show} in case it is not.
}
\details{
\itemize{
\item \code{spec()} generates the analysis1 yspec object
\item \code{file()} the file name and path of an example yspec file
\item \code{data()} is a function that generates a data set that can be checked
against \code{spec()}
\item \code{csv()} is the file name (and path) to the data set generated by \code{data()}
\item \code{proj()} generates a project object that can be rendered into a document
\item \code{yaml()} shows the analysis1 yaml file
\item \code{ref()} shows the syntax reference for yaml file
\item \code{db()} shows the internal column lookup data base
\item \code{example()} shows and Rmd file showing yspec workflow
\item \code{export(path)} export internal assets that can be used for exploration
in the local filesystem; you must supply the location (\code{path}) to
where the content is to be exported; there is also an \code{overwrite} argument
that will allow overwriting an existing folder (use with care!)
}
}
\examples{
spec <- ys_help$spec()

file <- ys_help$file()

data <- ys_help$data()  

csv  <- ys_help$csv()

\dontrun{
proj <- ys_help$proj()

ref <- ys_help$ref()

db <- ys_help$db()

ex <- ys_help$example()

path <- ys_help$export("expath")

}

}
\keyword{datasets}
