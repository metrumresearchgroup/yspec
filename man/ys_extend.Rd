% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/extend.R
\name{ys_extend}
\alias{ys_extend}
\title{Extend a yspec object}
\usage{
ys_extend(x, file = ys_extend_file(x), silent = FALSE)
}
\arguments{
\item{x}{A \code{yspec} object (the primary spec).}

\item{file}{The path to a yaml specification file to load and join to \code{x};
if \code{file} is not passed, the \code{yspec} object will be searched for the
\code{extend_file} attribute in \verb{SETUP__:} and will fail if it is not found.}

\item{silent}{Logical; if \code{TRUE}, issue message reporting the number of
columns added via extension; the user will alternatively be warned if there
were no columns added.}
}
\description{
Use this function to read and join another spec file to an existing
\code{yspec} object. The additional spec file can contain additional columns
that might be added to the data set on an ad-hoc basis or could include
modeling outputs (e.g. \code{IPRED}).
}
\details{
The extension is accomplished using \code{\link[=ys_join]{ys_join()}}, so any columns in the
extension spec that already exist in the primary spec are dropped. Use
\code{\link[=ys_select]{ys_select()}} on the the primary spec to drop columns that might be in the
extension and that you want to retain in the result.

If there are no new columns added by extension, that indicates all columns
in the extension spec already exist in primary spec. In this case, a
warning will be generated.
}
\examples{
extension_file <- system.file("spec", "nm-extension.yml", package = "yspec")

spec <- ys_help$spec() 
spec2 <- ys_extend(spec, extension_file)
tail(spec2)

ys_extend(spec)

\dontrun{
# In case COL is in both the primary spec and the extension, but you want 
# to retain what is in the extension
spec \%>\% select(-COL) \%>\% ys_extend("extension.yml")   
}

}
